{
    "AWSTemplateFormatVersion": "2010-09-09",
  
    "Description": "Lab 3",
  
    "Parameters": {
      "VpcId": {
        "Type": "AWS::EC2::VPC::Id",
        "Description": "VpcId of your existing Virtual Private Cloud (VPC)",
        "ConstraintDescription": "must be the VPC Id of an existing Virtual Private Cloud."
      },
  
      "Subnets": {
        "Type": "List<AWS::EC2::Subnet::Id>",
        "Description": "The list of SubnetIds in your Virtual Private Cloud (VPC)",
        "ConstraintDescription": "must be a list of at least two existing subnets associated with at least two different availability zones. They should be residing in the selected Virtual Private Cloud."
      },
  
      "InstanceType": {
        "Description": "WebServer EC2 instance type",
        "Type": "String",
        "Default": "t2.small",
        "AllowedValues": ["t1.micro", "t2.nano", "t2.micro", "t2.small", "t2.medium", "t2.large", "m1.small", "m1.medium"],
        "ConstraintDescription": "must be a valid EC2 instance type."
      },
  
      "SSHLocation": {
        "Description": "The IP address range that can be used to SSH to the EC2 instances",
        "Type": "String",
        "MinLength": "9",
        "MaxLength": "18",
        "Default": "0.0.0.0/0",
        "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
        "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x."
      }
    },
  
    "Mappings": {
      "Region2Examples": {
        "eu-west-1": {"Examples": "https://s3-eu-west-1.amazonaws.com/cloudformation-examples-eu-west-1"},
        "eu-west-2": {"Examples": "https://s3-eu-west-2.amazonaws.com/cloudformation-examples-eu-west-2"},
        "eu-west-3": {"Examples": "https://s3-eu-west-3.amazonaws.com/cloudformation-examples-eu-west-3"},
        "me-south-1": {"Examples": "https://s3-me-south-1.amazonaws.com/cloudformation-examples-me-south-1"},
        "sa-east-1": {"Examples": "https://s3-sa-east-1.amazonaws.com/cloudformation-examples-sa-east-1"},
        "us-east-1": {"Examples": "https://s3.amazonaws.com/cloudformation-examples-us-east-1"},
        "us-east-2": {"Examples": "https://s3-us-east-2.amazonaws.com/cloudformation-examples-us-east-2"},
        "us-west-1": {"Examples": "https://s3-us-west-1.amazonaws.com/cloudformation-examples-us-west-1"},
        "us-west-2": {"Examples": "https://s3-us-west-2.amazonaws.com/cloudformation-examples-us-west-2"}
      },
      "AWSInstanceType2Arch": {
        "t1.micro": {"Arch": "HVM64"},
        "t2.nano": {"Arch": "HVM64"},
        "t2.micro": {"Arch": "HVM64"},
        "t2.small": {"Arch": "HVM64"},
        "t2.medium": {"Arch": "HVM64"}
      },
      "AWSInstanceType2NATArch": {
        "t1.micro": {"Arch": "NATHVM64"},
        "t2.nano": {"Arch": "NATHVM64"},
        "t2.micro": {"Arch": "NATHVM64"},
        "t2.small": {"Arch": "NATHVM64"},
        "t2.medium": {"Arch": "NATHVM64"},
        "t2.large": {"Arch": "NATHVM64"},
        "m1.small": {"Arch": "NATHVM64"},
        "m1.medium": {"Arch": "NATHVM64"}
      },
      "AWSRegionArch2AMI": {
        "eu-west-3": {"HVM64": "ami-0caf07637eda19d9c", "HVMG2": "NOT_SUPPORTED"},
        "me-south-1": {"HVM64": "ami-0744743d80915b497", "HVMG2": "NOT_SUPPORTED"},
        "sa-east-1": {"HVM64": "ami-0a52e8a6018e92bb0", "HVMG2": "NOT_SUPPORTED"},
        "us-east-1": {"HVM64": "ami-032930428bf1abbff", "HVMG2": "ami-0aeb704d503081ea6"},
        "us-east-2": {"HVM64": "ami-0103f211a154d64a6", "HVMG2": "NOT_SUPPORTED"},
        "us-west-1": {"HVM64": "ami-088c153f74339f34c", "HVMG2": "ami-0a7fc72dc0e51aa77"},
        "us-west-2": {"HVM64": "ami-01fee56b22f308154", "HVMG2": "ami-0fe84a5b4563d8f27"}
      }
    },
  
    "Resources": {
      "WebServerGroup": {
        "Type": "AWS::AutoScaling::AutoScalingGroup",
        "Properties": {
          "VPCZoneIdentifier": {"Ref": "Subnets"},
          "LaunchConfigurationName": {"Ref": "LaunchConfig"},
          "MinSize": "4",
          "MaxSize": "5",
          "TargetGroupARNs": [{"Ref": "ALBTargetGroup"}]
        },
        "CreationPolicy": {
          "ResourceSignal": {
            "Timeout": "PT15M"
          }
        },
        "UpdatePolicy": {
          "AutoScalingRollingUpdate": {
            "MinInstancesInService": "1",
            "MaxBatchSize": "1",
            "PauseTime": "PT15M",
            "WaitOnResourceSignals": "true"
          }
        }
      },
  
      "LaunchConfig": {
        "Type": "AWS::AutoScaling::LaunchConfiguration",
        "Metadata": {
          "Comment": "Install a simple application",
          "AWS::CloudFormation::Init": {
            "config": {
              "packages": {
                "yum": {
                  "httpd": []
                }
              },
              "files": {
                "/var/www/html/index.html": {
                  "content": {"Fn::Join": ["\n", [
                    "<img src=\"", {"Fn::FindInMap": ["Region2Examples", {"Ref": "AWS::Region"}, "Examples"]}, "/cloudformation_graphic.png\" alt=\"AWS CloudFormation Logo\"/>",
                    "echo '<h1>Welcome to Server, this is jemish's server</h1><p>Instance IP: ', { \"Fn::GetAtt\" : [ \"WebServerInstance\", \"PrivateIp\" ] }, '</p>' > /var/www/html/index.html\n"
                  ]]},
                  "mode": "000644",
                  "owner": "root",
                  "group": "root"
                },
                "/etc/cfn/cfn-hup.conf": {
                  "content": {"Fn::Join": ["", [
                    "[main]\n",
                    "stack=", {"Ref": "AWS::StackId"}, "\n",
                    "region=", {"Ref": "AWS::Region"}, "\n"
                  ]]},
                  "mode": "000400",
                  "owner": "root",
                  "group": "root"
                },
                "/etc/cfn/hooks.d/cfn-auto-reloader.conf": {
                  "content": {"Fn::Join": ["", [
                    "[cfn-auto-reloader-hook]\n",
                    "triggers=post.update\n",
                    "path=Resources.LaunchConfig.Metadata.AWS::CloudFormation::Init\n",
                    "action=/opt/aws/bin/cfn-init -v ",
                    "         --stack ", {"Ref": "AWS::StackName"},
                    "         --resource LaunchConfig ",
                    "         --region ", {"Ref": "AWS::Region"}, "\n",
                    "runas=root\n"
                  ]]},
                  "mode": "000400",
                  "owner": "root",
                  "group": "root"
                }
              },
              "services": {
                "sysvinit": {
                  "httpd": {"enabled": "true", "ensureRunning": "true"},
                  "cfn-hup": {"enabled": "true", "ensureRunning": "true",
                              "files": ["/etc/cfn/cfn-hup.conf", "/etc/cfn/hooks.d/cfn-auto-reloader.conf"]}
                }
              }
            }
          }
        },
        "Properties": {
          "ImageId": {"Fn::FindInMap": ["AWSRegionArch2AMI", {"Ref": "AWS::Region"},
                          {"Fn::FindInMap": ["AWSInstanceType2Arch", {"Ref": "InstanceType"}, "Arch"]}]},
          "SecurityGroups": [{"Ref": "InstanceSecurityGroup"}],
          "InstanceType": {"Ref": "InstanceType"},
          "UserData": {
            "Fn::Base64": {
              "Fn::Join": [
                "",
                [
                  "#!/bin/bash -xe\n",
                  "yum update -y aws-cfn-bootstrap\n",
                  "/opt/aws/bin/cfn-init -v ",
                  "--stack ",
                  {
                    "Ref": "AWS::StackName"
                  },
                  " --resource LaunchConfig ",
                  "--region ",
                  {
                    "Ref": "AWS::Region"
                  },
                  "\n",
                  "/opt/aws/bin/cfn-signal -e $? ",
                  "--stack ",
                  {
                    "Ref": "AWS::StackName"
                  },
                  " --resource WebServerGroup ",
                  "--region ",
                  {
                    "Ref": "AWS::Region"
                  },
                  "\n",
                  "echo '<h1>Welcome to Server , this is jemish's server </h1><p>Instance IP: $(hostname -I)</p>' > /var/www/html/index.html\n"
                ]
              ]
            }
          }
          
        }
      },
  
      "ApplicationLoadBalancer": {
        "Type": "AWS::ElasticLoadBalancingV2::LoadBalancer",
        "Properties": {
          "Subnets": {"Ref": "Subnets"}
        }
      },
  
      "ALBListener": {
        "Type": "AWS::ElasticLoadBalancingV2::Listener",
        "Properties": {
          "DefaultActions": [{
            "Type": "forward",
            "TargetGroupArn": {"Ref": "ALBTargetGroup"}
          }],
          "LoadBalancerArn": {"Ref": "ApplicationLoadBalancer"},
          "Port": "80",
          "Protocol": "HTTP"
        }
      },
  
      "ALBTargetGroup": {
        "Type": "AWS::ElasticLoadBalancingV2::TargetGroup",
        "Properties": {
          "HealthCheckIntervalSeconds": 30,
          "HealthCheckTimeoutSeconds": 5,
          "HealthyThresholdCount": 3,
          "Port": 80,
          "Protocol": "HTTP",
          "UnhealthyThresholdCount": 5,
          "VpcId": {"Ref": "VpcId"}
        }
      },
  
      "InstanceSecurityGroup": {
        "Type": "AWS::EC2::SecurityGroup",
        "Properties": {
          "GroupDescription": "Enable SSH access and HTTP access on the inbound port",
          "SecurityGroupIngress": [{
            "IpProtocol": "tcp",
            "FromPort": "80",
            "ToPort": "80",
            "CidrIp": {"Ref": "SSHLocation"}
  
          },{
            "IpProtocol": "tcp",
            "FromPort": "22",
            "ToPort": "22",
            "CidrIp": {"Ref": "SSHLocation"}
          }],
          "VpcId": {"Ref": "VpcId"}
        }
      }
    },
  
    "Outputs": {
      "URL": {
        "Description": "URL of the website",
        "Value":  {"Fn::Join": ["", ["http://", {"Fn::GetAtt": ["ApplicationLoadBalancer", "DNSName"]}]]}
      }
    }
  }
  